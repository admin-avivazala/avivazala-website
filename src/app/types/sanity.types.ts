/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type CustomSettings = {
  _id: string;
  _type: "customSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  key?: string;
  value?: Array<string>;
};

export type LanguagesAvailable = {
  _id: string;
  _type: "languagesAvailable";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  languages?: Array<"hu" | "en">;
  langDefault?: Array<"hu" | "en">;
};

export type Navigation = {
  _id: string;
  _type: "navigation";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  navId?: Slug;
  items?: Array<{
    _key: string;
  } & NavigationItem>;
};

export type Event = {
  _id: string;
  _type: "event";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: LocaleString;
  slug?: LocaleSlug;
  eventType?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "eventType";
  };
  description?: LocaleText;
  location?: string;
  maxSubscribers?: number;
  basicPrice?: number;
  startDate?: string;
  endDate?: string;
  publicationStartDate?: string;
  publicationEndDate?: string;
  active?: boolean;
  attendants?: Array<{
    _key: string;
  } & EventAttendant>;
};

export type EventType = {
  _id: string;
  _type: "eventType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: LocaleString;
  description?: LocaleBlockContent;
  active?: boolean;
};

export type PostCategory = {
  _id: string;
  _type: "postCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: LocaleString;
  description?: LocaleText;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: LocaleString;
  slug?: LocaleSlug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "postCategory";
  }>;
  publishedAt?: string;
  body?: LocaleBlockContent;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: LocaleString;
  slug?: LocaleSlug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  body?: LocaleBlockContent;
};

export type NavigationItem = {
  _type: "navigationItem";
  title?: LocaleString;
  navigationItemLink?: NavigationLink;
};

export type NavigationLink = {
  _type: "navigationLink";
  internalLink?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  externalUrl?: string;
  submenu?: Array<{
    _key: string;
  } & NavigationItem>;
};

export type LocaleText = {
  _type: "localeText";
  hu?: string;
  en?: string;
};

export type LocaleString = {
  _type: "localeString";
  hu?: string;
  en?: string;
};

export type LocaleSlug = {
  _type: "localeSlug";
  hu?: Slug;
  en?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type LocaleBlockContent = {
  _type: "localeBlockContent";
  hu?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    size?: "sm" | "md" | "lg" | "orig";
    alignment?: "left" | "center" | "right";
    _type: "image";
    _key: string;
  }>;
  en?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    size?: "sm" | "md" | "lg" | "orig";
    alignment?: "left" | "center" | "right";
    _type: "image";
    _key: string;
  }>;
};

export type EventAttendant = {
  _type: "eventAttendant";
  fullName?: string;
  email?: string;
  phone?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  size?: "sm" | "md" | "lg" | "orig";
  alignment?: "left" | "center" | "right";
  _type: "image";
  _key: string;
}>;

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};
export declare const internalGroqTypeReferenceTo: unique symbol;

// Source: ./src/app/sanity-conf/lib/queries.ts
// Variable: mainMenuQuery
// Query: *[_type == "navigation" && navId.current == "main-menu"][0] {   items,  "pages": items[].navigationItemLink.internalLink->{    _id,    _type,    slug  },  "subpages": items[].navigationItemLink.submenu[].navigationItemLink.internalLink->{    _id,    _type,    slug  }}
export type MainMenuQueryResult = {
  items: Array<{
    _key: string;
  } & NavigationItem> | null;
  pages: Array<{
    _id: string;
    _type: "page";
    slug: LocaleSlug | null;
  } | {
    _id: string;
    _type: "post";
    slug: LocaleSlug | null;
  } | null> | null;
  subpages: Array<{
    _id: string;
    _type: "page";
    slug: LocaleSlug | null;
  } | {
    _id: string;
    _type: "post";
    slug: LocaleSlug | null;
  } | null> | null;
} | null;
// Variable: pageSlugsQuery
// Query: *[_type == "page"] {  slug}
export type PageSlugsQueryResult = Array<{
  slug: LocaleSlug | null;
}>;
// Variable: postSlugsQuery
// Query: *[_type == "post"] {  slug}
export type PostSlugsQueryResult = Array<{
  slug: LocaleSlug | null;
}>;
// Variable: languagesAvailableQuery
// Query: *[_type == "languagesAvailable"][0] {  languages,  langDefault}
export type LanguagesAvailableQueryResult = {
  languages: Array<"en" | "hu"> | null;
  langDefault: Array<"en" | "hu"> | null;
} | null;

